@layer theming.grid {
  /* --------- BODY LAYOUT --------- */
  body:has(&:not(body > #root)),
  body > #root {
    display: grid;
    gap: var(--gutter, 1rem);
    min-block-size: 100dvh;

    /* @DEV Auto-fit doesn't currently play nice with containment in webkit browsers 
       @see https://bugs.webkit.org/show_bug.cgi?id=256047 */
    /* container: body / inline-size; */

    --content-size: 1200px; /* NOTE: Must match with min-width specified in the below media query. */

    /* Rows for header, main and footer */
    --grid-rows: [full-start header-start] auto [header-end content-start] 1fr [content-end footer-start] auto
      [footer-end full-end];

    /* Ensure gutter columns 6% of viewport on either side or equivalent of margin: auto */
    --grid-page-gutters: max(6dvw, calc(50dvw - var(--content-size) / 2));

    /* Wide size uses extra column when viewport is larger than the content size using following media query */
    --wide-template-columns: [sidebar-start wide-start col-start] minmax(0, 1fr) [col-end content-start]
      repeat(3, [col-start] minmax(0, 1fr) [col-end]) [sidebar-end main-start wide-start]
      repeat(7, [col-start] minmax(0, 1fr) [col-end]) [main-end col-start] minmax(0, 1fr) [col-end wide-end];

    --content-template-columns: [wide-start content-start sidebar-start] repeat(4, [col-start] minmax(0, 1fr) [col-end])
      [sidebar-end main-start] repeat(8, [col-start] minmax(0, 1fr) [col-end]) [main-end content-end wide-end];

    --template-columns: var(--content-template-columns);
    /* Expand wide columns out from content columns with large screen width */
    /* The min-width specified here should match with the --content-size property. */
    @media screen and (min-width: 1200px) {
      & {
        --template-columns: var(--wide-template-columns);
      }
    }

    /* Uses --template-columns property set above to determine column layout */
    grid-template-columns:
      [full-start header-start footer-start]
      var(--grid-page-gutters)
      var(--template-columns) /* changes on screen width */
      var(--grid-page-gutters)
      [header-end footer-end full-end];

    grid-template-rows:
      [header-start] auto
      [header-end content-start] 1fr
      [content-end footer-start] auto
      [footer-end];

    /* 
     * TODO DEV: Implement once css style queries are baseline supported, replacing media query
     * @see https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_containment/Container_size_and_style_queries#browser_compatibility  
     */
    /* @container style(--size: wide) {
      & {
        grid-template-columns:
          [full-start header-start footer-start] max(8dvw, calc(50dvw - var(--content-size) / 2))
          [wide-start col-start] minmax(0, 1fr) [col-end content-start]
          repeat(10, [col-start] minmax(0, 1fr) [col-end])
          [content-end col-start] minmax(0, 1fr) [col-end wide-end]
          max(8dvw, calc(50dvw - var(--content-size) / 2))
          [header-end footer-end full-end];
      }
    } */

    :where(header, footer):not(main header, main footer) {
      grid-column: full;
      grid-row: header;
    }

    > :where(main, aside, nav) {
      grid-column: content;
      grid-row: content;
    }

    > aside ~ main {
      grid-column: main;
    }

    /* main,
    :where(header, footer):not(main header, main footer), */
    /* > * {
      display: grid;
      grid-template-columns: subgrid;
      grid-column: full;
      row-gap: var(--gutter); */

    /* > * { */
    grid-column: content; /* default to column. Expand to wide on individual elements. */
    /* } */
    /* } */
  }
}
