@layer theming.core {
  [hidden] {
    display: none !important;
  }

  /* Prevent long strings from overflowing container */
  p,
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    overflow-wrap: break-word;
  }

  a:focus,
  a:focus-within {
    outline-color: var(--color-accent);
    outline-offset: 5px;
  }

  a:is(nav a, button a) {
    text-decoration: none;
  }

  a:not([class]):hover,
  abbr {
    text-underline-offset: 0.2ex;
  }

  :is(p, ul, ol):not(li *) {
    margin: unset;
  }

  :focus {
    outline-color: var(--focus-ring-color);
    outline-style: var(--focus-ring-style);
    outline-width: var(--focus-ring-width);
    outline-offset: var(--focus-ring-offset);
  }

  @supports selector(::selection) {
    ::selection {
      background: var(--selection-bg);
      color: var(--selection-text);
    }
  }

  @supports selector(:focus-visible) {
    :focus {
      outline: none;
    }

    :focus-visible {
      outline-color: var(--focus-ring-color);
      outline-style: var(--focus-ring-style);
      outline-width: var(--focus-ring-width);
      outline-offset: var(--focus-ring-offset);
    }
  }

  svg {
    flex-shrink: 0;
  }

  /* LISTS **********************/
  :where(ul, ol):not(nav ul, nav ol) {
    display: flex;
    flex-direction: column;
    margin-block: var(--spacing-xs);
    padding-inline-start: var(--spacing-sm);
    gap: var(--gutter-xs);
    list-style-position: inside;

    /* nested lists */
    & & {
      margin-block-end: 0;
      padding-inline-start: var(--spacing-lg);
    }

    @supports selector(li::marker) {
      & li::marker {
        display: inline-flex;
        font: inherit;
        text-align: unset;
      }
    }

    &[role="list"],
    &[role="listbox"] {
      padding-inline-start: 0;
      list-style: none;
    }
  }

  /* Custom cascading number marker for nested counters (1.1, 1.2, etc.) */
  ol {
    list-style: none;
    counter-reset: item;

    li {
      padding-inline-start: 0;
      &:before {
        display: inline-flex;
        padding-inline-end: var(--spacing-md);
        content: counters(item, ".") ".";
        counter-increment: item;
      }
    }
  }

  /* Description lists */
  dl {
    /* Description terms */
    dt {
      font-weight: bold;
      font-family: var(--font-headings);
    }

    /* Description definitions */
    dd {
      margin-inline-start: var(--spacing-lg);
    }
  }

  /* FIGURES **********************/
  figure {
    max-inline-size: 100%;
    margin: unset;
    overflow-x: auto;

    > img,
    > picture > img {
      max-inline-size: 100%;
      margin-inline: auto;
    }

    figcaption {
      color: var(--text-muted);
      font-size: 0.9em;
      text-align: center;
    }
  }

  /* HEADINGS **********************/
  h1,
  h2,
  h3,
  h4,
  h5,
  h6 {
    /* margin-block-start: var(--spacing-sm); */
    margin-block: unset;
    font-weight: bold;
    font-size: var(--fontsize-md, 1rem);
    font-family: var(--font-headings);
    text-wrap: balance;

    /* Adds a marker when the url fragment matches a specified target element */
    /* e.g. navigating to https://developer.mozilla.org/en-US/docs/Web/CSS/:target#syntax  */
    &:target::before,
    header:target &::before
    /* *:target header &::before  */ {
      display: inline-block;
      margin-inline-start: -3ch;
      padding-inline-start: 1.3ch;
      padding-inline-end: 0.3ch;
      content: "#";
      color: var(--color-accent);
      font-size: var(--fontsize-sm);
      line-height: 1;
      vertical-align: middle;

      opacity: 0.6;
    }
  }

  h1,
  h2,
  h3,
  h4 {
    line-height: var(--line-height-condensed, 1.2);
  }

  h1 {
    font-weight: bolder;
    font-size: var(--fontsize-xxl);
  }

  h2 {
    font-size: var(--fontsize-xl);
  }

  h3 {
    font-size: var(--fontsize-lg);
  }

  h4 {
    font-weight: bolder;
  }

  h5 {
    font-weight: bold;
  }

  h6 {
    font-size: var(--fontsize-sm);
    text-transform: uppercase;
  }

  /* LINKS & BUTTONS **********************/
  /* button,
  .button,
  a.button,
  [role="button"],
  input[type="submit"],
  input[type="reset"],
  input[type="button"],
  label[type="button"],
  input::file-selector-button {
    --button-color: var(--color-accent);
    --button-l1: var(--accent-l1);
    --button-l2: var(--accent-l2);

    border: 1px solid var(--button-color);
    border-radius: var(--border-radius);
    background-color: var(--button-color);
    color: var(--text-contrast);
    font-weight: 500;
    padding-block: var(--spacing-sm);
    padding-inline: var(--spacing-md);
    text-decoration: none;
    line-height: normal;

    &[data-status="success"] {
      --button-color: var(--success-base);
      --button-l1: var(--success-l1);
      --button-l2: var(--success-l2);
    }

    &[data-status="warning"],
    &[data-status="warn"] {
      --button-color: var(--warning-base);
      --button-l1: var(--warning-l1);
      --button-l2: var(--warning-l2);
    }

    &[data-status="error"],
    &[data-status="err"] {
      --button-color: var(--error-base);
      --button-l1: var(--error-l1);
      --button-l2: var(--error-l2);
    }

    &:not(:disabled, [aria-disabled="true"], [disabled]) {
      cursor: pointer;
      transition: all 0.2s ease-in-out;

      &:hover,
      &:focus-visible,
      &:focus-within {
        background-color: var(--button-l1);
        color: var(--text-contrast);
        transition: all 0.2s ease-in-out;
        scale: 1.02;
      }

      &:active {
        color: var(--text-base);
        background-color: var(--button-l2);
      }

      &:focus-visible {
        outline: 2px solid var(--focus-outline);
        outline-offset: var(--spacing-xs);
      }
    }
  }

  .button:disabled,
  .button[aria-disabled="true"],
  input:disabled,
  textarea:disabled,
  select:disabled,
  button:disabled,
  button[disabled] {
    cursor: not-allowed;
    background-color: var(--bg-disabled);
    border-color: var(--bg-disabled);
    color: var(--text-disabled);

    &:hover,
    &:focus,
    &:active {
      background-color: var(--bg-disabled);
      border-color: var(--bg-disabled);
      color: var(--text-disabled);
    }
  }

  p:has(> button + button) {
    display: flex;
    flex-wrap: wrap;
    gap: var(--gutter-sm);
  } */

  /* Temp fix - @dev not sure why nesting selector is not working for ::file-selector-button */
  input::file-selector-button {
    transition: all 0.2s ease-in-out;
  }
  input::file-selector-button:hover {
    background-color: var(--accent-l1);
    color: var(--text-contrast);
    transition: all 0.2s ease-in-out;
  }
  input::file-selector-button:active {
    background-color: var(--accent-l2);
    color: var(--text-base);
  }
  input::file-selector-button:focus-visible {
    outline: 2px solid var(--focus-outline);
    outline-offset: var(--spacing-xs);
  }

  /* GROUPING CONTENT */

  code,
  pre,
  pre span,
  kbd,
  samp {
    font-style: normal;
    font-family: var(--font-mono);
  }

  /* per https://html.spec.whatwg.org/multipage/text-level-semantics.html#the-kbd-element */
  kbd kbd {
    display: inline-block;
    margin-inline: var(--spacing-xs);
    padding-inline: var(--spacing-sm);
    padding-block: var(--spacing-xs);
    border: 1px outset var(--color-gray);
    border-radius: var(--border-radius);
    border-block-end-width: 3px;
    font-size: 0.8em;

    line-height: inherit;
  }

  samp {
    color: var(--text-base-accent);
  }

  pre {
    margin-block: var(--gutter);

    overflow-x: auto;
    font-size: 0.9em;
    scrollbar-width: thin;
    tab-size: 2;

    @supports (scrollbar-color: var(--color-accent) transparent) {
      scrollbar-color: var(--color-accent) transparent;
    }
  }

  blockquote,
  figure:has(> blockquote) {
    display: grid;
    padding-block: var(--gutter);
    gap: var(--spacing-sm);

    cite {
      padding-block-start: var(--gutter-xs);
      line-height: 1;
    }

    &:is(blockquote),
    + cite,
    + :where(p, figcaption, div):has(cite) {
      margin-inline: var(--spacing-lg);
      margin-block: unset;

      padding-inline-start: var(--spacing-md);
      padding-inline-end: var(--spacing-md);

      border-inline-start: 4px solid var(--primary-l2);
      background-color: var(--bg-base);
      font-style: italic;

      font-size: var(--fontsize-md);
      text-wrap: pretty;

      &:is(cite, cite *, em, dfn, var, i, address),
      & :is(cite, cite *, em, dfn, var, i, address) {
        font-style: normal;
      }
    }

    & + :where(figcaption, p, div, footer):has(cite),
    &:not(blockquote) + cite {
      margin-block-start: calc(0px - var(--gutter));
      padding-block: var(--gutter);

      &:not(p) {
        display: flex;
      }
    }

    &:not(blockquote) {
      display: contents;
    }

    /* Extra styling added for the semantically-correct blockquote with non-child citation */
    & blockquote,
    &:is(blockquote):has(+ cite, + * cite) {
      padding-block-end: 0;
    }

    :where(> cite:last-child, p + cite:last-child, p:has(cite):last-child, + p:has(cite):last-child),
    &:not(blockquote) + :where(p, figcaption, div, footer):has(cite),
    + :where(p, figcaption, div, footer):has(cite) {
      font-style: normal;
      font-size: var(--fontsize-sm);

      &::before {
        align-self: center;
        /* Insert an em dash before the cite source if it's not an inline citation */
        content: "â€”\00a0";
        font-size: var(--fontsize-sm);
      }
    }
  }

  /* TEXT-LEVEL SEMANTICS */
  a {
    display: inline;
    color: var(--link-unvisited, LinkText);

    &:hover {
      color: var(--link-hover);
      text-decoration: none;
    }

    &:active {
      color: var(--link-active, ActiveText);
    }

    &:visited {
      color: var(--link-visited, VisitedText);
    }
  }

  strong,
  b {
    font-weight: bolder;
  }

  small {
    font-size: var(--fontsize-sm);
  }

  q {
    font-style: italic;

    & :is(em, cite, dfn, var, i, address) {
      font-style: normal;
    }
  }

  cite {
    font-size: var(--fontsize-sm);
  }

  mark {
    margin-inline: -0.1ch;
    padding-inline: 0.2ch;
    background-color: var(--color-mark, Mark);
    color: var(--color-marktext, MarkText);
  }

  s,
  del {
    text-decoration-color: var(--error-base, #d32f2f);
  }

  del {
    background-color: var(--error-l3, #d32f2f2f);
  }

  ins {
    background-color: var(--success-l3, #2e7d322f);
    text-decoration-color: var(--success-base, #2e7d32);
  }

  /* EMBEDDED CONTENT **********************/
  img,
  video,
  audio,
  iframe,
  object,
  embed {
    /* min-inline-size: 100%; */
    vertical-align: middle;
  }

  img {
    border-radius: var(--border-radius);
  }

  /* Background SVGs */
  svg:not(:root, ::backdrop) {
    overflow: hidden;
  }

  /* TABULAR DATA **********************/
  table {
    --row-separator: 1px solid var(--color-gray);
    --table-separator: 2px solid
      light-dark(color-mix(in srgb, black 80%, transparent), color-mix(in srgb, white 80%, transparent));
    --table-stripes: light-dark(var(--primary-l4), var(--primary-d3));
    --table-background: var(--bg-base);

    position: relative;
    margin-block-end: var(--spacing-md);

    border-collapse: collapse;
    box-shadow: var(--shadow);

    &:has(* > &) {
      overflow-x: auto;
    }

    figure & {
      inline-size: max-content;
      box-shadow: unset;
    }

    caption {
      margin-block-end: var(--spacing-sm);
      font-weight: bold;
      font-family: var(--font-headings);
      text-wrap: balance;
    }

    td,
    th {
      padding-inline: var(--spacing-sm);
      padding-block: 0.5lh; /* Adjust padding by text size */
      border-inline: var(--table-separator);
      text-align: center;
    }

    tbody {
      tr {
        border: var(--row-separator);
        background-color: var(--table-background);

        &:nth-child(even) {
          background-color: var(--table-stripes);
        }

        &:first-child {
          border-block-start: var(--table-separator);
        }

        &:last-child {
          border-block-end: var(--table-separator);
        }
      }
    }

    thead,
    tfoot {
      tr {
        border-block: var(--table-separator);
      }

      th,
      td {
        background-color: light-dark(var(--primary-d1), var(--primary-l1));
        color: var(--text-contrast);
      }

      td {
        padding-block: 0.5lh;
        font-style: italic;
        font-weight: normal;
        font-size: var(--fontsize-sm);
      }
    }
  }

  /* INTERACTIVE CONTENT **********************/
  /*  Note that there is currently no way to animate this without JS (other than the marker).  */
  details {
    padding-inline: var(--spacing-md);
    padding-block: var(--spacing-sm);
    border: 1px solid var(--color-border);
    border-radius: var(--border-radius);

    box-shadow: var(--shadow);

    summary {
      z-index: 10;
      position: relative;

      padding-inline-start: var(--spacing-md);
      font-weight: bold;
      list-style: none;

      cursor: pointer;
      user-select: none;

      &::before {
        position: absolute;
        top: 50%;
        left: calc(0px - var(--spacing-md));
        transform: rotate(0);
        transform-origin: 25% 50%;
        translate: var(--spacing-md) -48%;
        border: 1ex solid transparent;
        border-left-color: var(--color-primary);
        content: "";
        transition: 250ms transform ease-in-out;
      }
    }

    &[open] {
      summary {
        margin-block-end: var(--spacing-sm);

        &::before {
          transform: rotate(90deg);
        }
      }
    }
  }
}

@layer theming.layout {
  /* main :is(article, section, nav, aside, hgroup, address) {
    padding-block: var(--spacing-md);
  } */

  /* section {
    padding-inline: var(--spacing-md);
    margin-inline: calc(0px - var(--spacing-md));
  } */

  section,
  article {
    display: flex;
    flex-direction: column;

    max-inline-size: 100%;

    overflow-x: auto;
    gap: var(--spacing-md);

    &:has(> p + p) {
      row-gap: var(--spacing-sm);
    }
  }

  /* section:not(:has(article)),
  section article,
  form:has(fieldset) {
    padding: var(--spacing-md);

    border: 1px solid var(--color-border);
    box-shadow: var(--shadow);
  } */

  hr {
    display: block;
    inline-size: 100%;
    block-size: 2px;
    border: none;
    background-color: currentColor;
  }
}
